<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--<property name="url" value="${jdbc_url}"/>-->
        <!--<property name="username" value="${jdbc_username}"/>-->
        <!--<property name="password" value="${jdbc_password}"/>-->

        <!--<property name="initialSize" value="0"/>-->
        <!--<property name="maxActive" value="200"/>-->
        <!--<property name="minIdle" value="0"/>-->
        <!--<property name="maxWait" value="60000"/>-->
        <!--&lt;!&ndash;-->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />-->
        <!--&ndash;&gt;-->
        <!--<property name="validationQuery" value="${validationQuery}"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->

        <!--<property name="timeBetweenEvictionRunsMillis" value="6000"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="60000"/>-->

        <!--<property name="removeAbandoned" value="true"/>-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--<property name="logAbandoned" value="true"/>-->

    <!--</bean>-->

    <bean id="dataSource" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 指定连接数据库的驱动-->
        <property name="driverClass" value="${driverClassName}"/>
        <!-- 指定连接数据库的URL-->
        <property name="jdbcUrl" value="${jdbc_url}"/>
        <!-- 指定连接数据库的用户名-->
        <property name="user" value="${jdbc_username}"/>
        <!-- 指定连接数据库的密码-->
        <property name="password" value="${jdbc_password}"/>
        <!-- 指定连接池中保留的最大连接数. Default:15-->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <!-- 指定连接池中保留的最小连接数-->
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
    </bean>

    <!-- hibernate session -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
            </props>
        </property>

        <!-- autoscan annotation for hiberante config -->
        <property name="packagesToScan">
            <list>
                <value>com.jingguan.*.po</value>
            </list>
        </property>
    </bean>

    <!-- transaction manager -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="append*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="saveOrUpdate*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="init" propagation="REQUIRED"/>
            <tx:method name="delAndInit" propagation="REQUIRED"/>
            <tx:method name="repair*" propagation="REQUIRED"/>
            <tx:method name="upload*" propagation="REQUIRED"/>
            <tx:method name="roleEdit*" propagation="REQUIRED"/>

            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="search*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="datagrid*" propagation="REQUIRED" read-only="true"/>

            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.jingguan.*.service.impl.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>

</beans>
